{"version":3,"sources":["components/Movie.module.css","components/MoviesList.module.css","components/AddMovie.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","release","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","data","loadedMovies","push","message","axios","post","console","log","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":";8HACAA,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,2ECAhCD,EAAOC,QAAU,CAAC,QAAU,4B,yJCabC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,iBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAMS,QACnBN,YAAaH,EAAMG,mB,gBC6BdO,MAtCf,SAAkBb,GAChB,IAAMc,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMjB,EAAQ,CACZC,MAAOU,EAASO,QAAQC,MACxBhB,YAAaU,EAAeK,QAAQC,MACpCjB,YAAaY,EAAeI,QAAQC,OAGtCtB,EAAMuB,WAAWpB,KAKf,yBAAKF,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOf,GAAG,QAAQgB,IAAKb,KAErC,yBAAKb,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIjB,GAAG,eAAegB,IAAKX,KAE5C,yBAAKf,UAAWC,IAAQsB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BAAOC,KAAK,OAAOf,GAAG,OAAOgB,IAAKV,KAEpC,+C,+yMCiDSY,MA/Ef,WACE,MAA4BC,mBAAS,IAArC,mBAAOtB,EAAP,KAAeuB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,iGACrCJ,GAAa,GACbE,EAAS,MAF4B,kBAIZG,MAAM,sEAJM,WAI7BC,EAJ6B,QAKrBC,GALqB,sBAM3B,IAAIC,MAAM,yBANiB,wBAShBF,EAASG,OATO,QAapC,IAAWhC,KAJJiC,EAT6B,OAY9BC,EAAa,GACDD,EACjBC,EAAaC,KAAK,CAChBlC,GAAGD,EACHN,MAAMuC,EAAKjC,GAAKN,MAChBE,YAAYqC,EAAKjC,GAAKJ,YACtBD,YAAYsC,EAAKjC,GAAKL,cAIxB0B,EAAUa,GAtByB,kDAwBnCT,EAAS,KAAMW,SAxBoB,QA0BrCb,GAAa,GA1BwB,0DA2BpC,IAhCU,4CAsCb,WAA+B9B,GAA/B,yFAE4B4C,IAAMC,KAAK,qEAAqE,CACtG1C,YAAaH,EAAMG,YACnBD,YAAaF,EAAME,YACnBD,MAAOD,EAAMC,QALnB,cAEUmC,EAFV,gBASsBA,EAASG,OAT/B,OASSC,EATT,OAUGM,QAAQC,IAAIP,GAVf,4CAtCa,sBAkCbQ,qBAAU,WACRf,MACC,CAACA,IAgBJ,IAAIgB,EAAU,+CAcd,OAZI5C,EAAO6C,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY9C,OAAQA,KAG5B0B,IACFkB,EAAU,2BAAIlB,IAGZF,IACFoB,EAAU,0CAIV,kBAAC,IAAMG,SAAP,KACE,iCACE,kBAAC,EAAD,CAAUhC,WArEH,+CAuET,iCACE,4BAAQiC,QAASpB,GAAjB,iBAEF,iCAAUgB,KC3EhBK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3fdeb179.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__8_jcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__SuPaH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2DIHZ\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.release}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://my-react-app-e1cd9-default-rtdb.firebaseio.com/movies.json');\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      \n\n     const loadedMovies=[];\n     for(const  key in data){\n      loadedMovies.push({\n        id:key,\n        title:data[key].title,\n        openingText:data[key].openingText,\n        releaseDate:data[key].releaseDate,\n\n      });\n     }\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n      \n      const response =  await axios.post('https://my-react-app-e1cd9-default-rtdb.firebaseio.com/movies.json',{\n        openingText: movie.openingText,\n        releaseDate: movie.releaseDate,\n        title: movie.title\n        }\n      );\n\n     const data = await response.json();\n     console.log(data);\n\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}